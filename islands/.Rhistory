return(result)
}
#node = list(x,y,val)
n1 = list(x=1,y=2,v=2)
n2 = list(x=1,y=3,v=2)
n3 = list(x=2,y=3,v=4)
n4 = list(x=2,y=1,v=3)
n5 = list(x=3,y=1,v=3)
n6 = list(x=3,y=2,v=1)
#n7 = list(x=10,y=10,v=1) #do spr, ale dziala
#n8 = list(x=10,y=20,v=1)
#n9 = list(x=10,y=30,v=1)
#nodes = list(n1,n2,n3,n4,n5,n6,n7,n8,n9)
nodes = list(n1,n2,n3,n4,n5,n6)
edges <- metody.init(nodes)
edges <- metody.mutateEdges(edges, 2)
edges
source('mht.r')
# Z wejscia gdzie otrzymuje liste wierzcholkow z wartosciami generuje tylko prawidlowe krawedzie i zapisuje zaleznosci miedzy przecinajacymi sie
# !!!KONSTRUKCJE!!!
#
# wyspa - list(x,y,v) :: wspolrzedne wyspy i jej liczba
#
# przyjmuje dwie wyspy jako argumenty
# zwraca wartosc logiczna - czy moga one byc polaczone mostem
# tzn czy maja taka sama wspolrzedna rzedna lub odcieta
metody.canBeConnected <- function(islandA,islandB)
{
return( (islandA$x == islandB$x) || (islandA$y == islandB$y))
}
metody.genEdgeNo <- function(){
x <- UG()
if(x<=0.33){
return(0)
}
else{
if(x<=0.66){
return(1)
}
else{
return(2)
}
}
}
metody.mutateEdges <- function(r, degree){
if(degree==1){
tmp <- sample(1:length(r), 1)
return(metody.mutate(r, tmp))
}
else{
tmp <- metody.mutate(r, sample(1:length(r), 1))
return(metody.mutate(tmp, sample(1:length(r), 1)))
}
}
metody.mutate <- function(r, x) #mutuje wskazana krawedz (numer x) ze zbioru (r)
{v1<- metody.genEdgeNo()
if(r[[x]]$edgeNo<0){ #gdy wylaczona, wlacz i spr inne
for(i in 1:length(x$dep)){
if(r[[r[[x]]$dep[i]]]$edgeNo>=0){
r[[r[[x]]$dep[i]]]$edgeNo <- (-1)*r[[r[[x]]$dep[i]]]$edgeNo
}
}
}
else{ #gdy wlaczona, wylacz
r[[x]]$edgeNo <- (-1) * v1
}
return(r)
}
# n - wektor wysp
metody.findEdges <- function(n)
{
result <- list()
flag <- TRUE
count <- length(n)
for(i in 1:(length(n)-1))
{
for(j in (i+1):length(n))
{
# dla kazdej pary wysp i,j
if( metody.canBeConnected(n[[i]], n[[j]]) ) # jesli mozna postawic most miedzy wyspami i oraz j
{
flag <- TRUE
for(k in 1:count)
{
# czy pomiedzy wyspami jest jeszcze inna wyspa
if
(
n[[i]]$x==n[[j]]$x && n[[j]]$x==n[[k]]$x && (n[[i]]$y<n[[k]]$y && n[[k]]$y<n[[j]]$y || n[[j]]$y<n[[k]]$y && n[[k]]$y<n[[i]]$y)
||
n[[i]]$y==n[[j]]$y && n[[j]]$y==n[[k]]$y && (n[[i]]$x<n[[k]]$x && n[[k]]$x<n[[j]]$x || n[[j]]$x<n[[k]]$x && n[[k]]$x<n[[i]]$x)
)
{
flag <- FALSE
break
}
}
if(flag)
{
if(n[[i]]$x <= n[[j]]$x)
{#potrzebne te warunki, zeby pozniej przeciecia dobrze skminic
if(n[[i]]$x != n[[j]]$x)
{
tmp_x1 <- n[[i]]$x
tmp_x2 <- n[[j]]$x
tmp_y1 <- n[[i]]$y
tmp_y2 <- n[[j]]$y
tmp_v1 <- n[[i]]$v
tmp_v2 <- n[[j]]$v
}
else
{
if(n[[i]]$y <= n[[j]]$y)
{
tmp_x1 <- n[[i]]$x
tmp_x2 <- n[[j]]$x
tmp_y1 <- n[[i]]$y
tmp_y2 <- n[[j]]$y
tmp_v1 <- n[[i]]$v
tmp_v2 <- n[[j]]$v
}
else
{
tmp_x2 <- n[[i]]$x
tmp_x1 <- n[[j]]$x
tmp_y2 <- n[[i]]$y
tmp_y1 <- n[[j]]$y
tmp_v1 <- n[[j]]$v
tmp_v2 <- n[[i]]$v
}
}
}
else
{
tmp_x2 <- n[[i]]$x
tmp_x1 <- n[[j]]$x
tmp_y2 <- n[[i]]$y
tmp_y1 <- n[[j]]$y
tmp_v1 <- n[[j]]$v
tmp_v2 <- n[[i]]$v
}
result[[length(result)+1]] <- list(x1=tmp_x1, y1=tmp_y1, v1=(n[[i]]$v), x2=tmp_x2, y2=tmp_y2, v2=(n[[j]]$v), dep=c(), edgeNo=0)
}
}
}
}
return(result)
}
metody.areCrossing  <- function(n){
for(i in 1:(length(n)-1)){
for(j in (i+1):length(n)){
if(
n[[i]]$x1<n[[j]]$x1 && n[[i]]$x2>n[[j]]$x1 && n[[i]]$y1>n[[j]]$y1 && n[[i]]$y1<n[[j]]$y2
||
n[[j]]$x1<n[[i]]$x1 && n[[j]]$x2>n[[i]]$x1 && n[[j]]$y1>n[[i]]$y1 && n[[j]]$y1<n[[i]]$y2
){
n[[i]]$dep[length(n[[j]]$dep)+1] <- c(j)
n[[j]]$dep[length(n[[j]]$dep)+1] <- c(i)
}
}
}
return(n)
}
metody.init <- function(n){ #z listy wierzcholkow generuje graf
result <- metody.findEdges(n)
result <- metody.areCrossing(result)
return(result)
}
#node = list(x,y,val)
n1 = list(x=1,y=2,v=2)
n2 = list(x=1,y=3,v=2)
n3 = list(x=2,y=3,v=4)
n4 = list(x=2,y=1,v=3)
n5 = list(x=3,y=1,v=3)
n6 = list(x=3,y=2,v=1)
#n7 = list(x=10,y=10,v=1) #do spr, ale dziala
#n8 = list(x=10,y=20,v=1)
#n9 = list(x=10,y=30,v=1)
#nodes = list(n1,n2,n3,n4,n5,n6,n7,n8,n9)
nodes = list(n1,n2,n3,n4,n5,n6)
edges <- metody.init(nodes)
edges <- metody.mutateEdges(edges, 2)
edges
source('mht.r')
# Z wejscia gdzie otrzymuje liste wierzcholkow z wartosciami generuje tylko prawidlowe krawedzie i zapisuje zaleznosci miedzy przecinajacymi sie
# !!!KONSTRUKCJE!!!
#
# wyspa - list(x,y,v) :: wspolrzedne wyspy i jej liczba
#
# przyjmuje dwie wyspy jako argumenty
# zwraca wartosc logiczna - czy moga one byc polaczone mostem
# tzn czy maja taka sama wspolrzedna rzedna lub odcieta
metody.canBeConnected <- function(islandA,islandB)
{
return( (islandA$x == islandB$x) || (islandA$y == islandB$y))
}
metody.genEdgeNo <- function(){
x <- UG()
if(x<=0.33){
return(0)
}
else{
if(x<=0.66){
return(1)
}
else{
return(2)
}
}
}
metody.mutateEdges <- function(r, degree){
if(degree==1){
tmp <- sample(1:length(r), 1)
return(metody.mutate(r, tmp))
}
else{
tmp <- metody.mutate(r, sample(1:length(r), 1))
return(metody.mutate(tmp, sample(1:length(r), 1)))
}
}
metody.mutate <- function(r, x) #mutuje wskazana krawedz (numer x) ze zbioru (r)
{v1<- metody.genEdgeNo()
if(r[[x]]$edgeNo<0){ #gdy wylaczona, wlacz i spr inne
for(i in 1:length(r[[x]]$dep)){
if(r[[r[[x]]$dep[i]]]$edgeNo>=0){
r[[r[[x]]$dep[i]]]$edgeNo <- (-1)*r[[r[[x]]$dep[i]]]$edgeNo
}
}
}
else{ #gdy wlaczona, wylacz
r[[x]]$edgeNo <- (-1) * v1
}
return(r)
}
# n - wektor wysp
metody.findEdges <- function(n)
{
result <- list()
flag <- TRUE
count <- length(n)
for(i in 1:(length(n)-1))
{
for(j in (i+1):length(n))
{
# dla kazdej pary wysp i,j
if( metody.canBeConnected(n[[i]], n[[j]]) ) # jesli mozna postawic most miedzy wyspami i oraz j
{
flag <- TRUE
for(k in 1:count)
{
# czy pomiedzy wyspami jest jeszcze inna wyspa
if
(
n[[i]]$x==n[[j]]$x && n[[j]]$x==n[[k]]$x && (n[[i]]$y<n[[k]]$y && n[[k]]$y<n[[j]]$y || n[[j]]$y<n[[k]]$y && n[[k]]$y<n[[i]]$y)
||
n[[i]]$y==n[[j]]$y && n[[j]]$y==n[[k]]$y && (n[[i]]$x<n[[k]]$x && n[[k]]$x<n[[j]]$x || n[[j]]$x<n[[k]]$x && n[[k]]$x<n[[i]]$x)
)
{
flag <- FALSE
break
}
}
if(flag)
{
if(n[[i]]$x <= n[[j]]$x)
{#potrzebne te warunki, zeby pozniej przeciecia dobrze skminic
if(n[[i]]$x != n[[j]]$x)
{
tmp_x1 <- n[[i]]$x
tmp_x2 <- n[[j]]$x
tmp_y1 <- n[[i]]$y
tmp_y2 <- n[[j]]$y
tmp_v1 <- n[[i]]$v
tmp_v2 <- n[[j]]$v
}
else
{
if(n[[i]]$y <= n[[j]]$y)
{
tmp_x1 <- n[[i]]$x
tmp_x2 <- n[[j]]$x
tmp_y1 <- n[[i]]$y
tmp_y2 <- n[[j]]$y
tmp_v1 <- n[[i]]$v
tmp_v2 <- n[[j]]$v
}
else
{
tmp_x2 <- n[[i]]$x
tmp_x1 <- n[[j]]$x
tmp_y2 <- n[[i]]$y
tmp_y1 <- n[[j]]$y
tmp_v1 <- n[[j]]$v
tmp_v2 <- n[[i]]$v
}
}
}
else
{
tmp_x2 <- n[[i]]$x
tmp_x1 <- n[[j]]$x
tmp_y2 <- n[[i]]$y
tmp_y1 <- n[[j]]$y
tmp_v1 <- n[[j]]$v
tmp_v2 <- n[[i]]$v
}
result[[length(result)+1]] <- list(x1=tmp_x1, y1=tmp_y1, v1=(n[[i]]$v), x2=tmp_x2, y2=tmp_y2, v2=(n[[j]]$v), dep=c(), edgeNo=0)
}
}
}
}
return(result)
}
metody.areCrossing  <- function(n){
for(i in 1:(length(n)-1)){
for(j in (i+1):length(n)){
if(
n[[i]]$x1<n[[j]]$x1 && n[[i]]$x2>n[[j]]$x1 && n[[i]]$y1>n[[j]]$y1 && n[[i]]$y1<n[[j]]$y2
||
n[[j]]$x1<n[[i]]$x1 && n[[j]]$x2>n[[i]]$x1 && n[[j]]$y1>n[[i]]$y1 && n[[j]]$y1<n[[i]]$y2
){
n[[i]]$dep[length(n[[j]]$dep)+1] <- c(j)
n[[j]]$dep[length(n[[j]]$dep)+1] <- c(i)
}
}
}
return(n)
}
metody.init <- function(n){ #z listy wierzcholkow generuje graf
result <- metody.findEdges(n)
result <- metody.areCrossing(result)
return(result)
}
#node = list(x,y,val)
n1 = list(x=1,y=2,v=2)
n2 = list(x=1,y=3,v=2)
n3 = list(x=2,y=3,v=4)
n4 = list(x=2,y=1,v=3)
n5 = list(x=3,y=1,v=3)
n6 = list(x=3,y=2,v=1)
#n7 = list(x=10,y=10,v=1) #do spr, ale dziala
#n8 = list(x=10,y=20,v=1)
#n9 = list(x=10,y=30,v=1)
#nodes = list(n1,n2,n3,n4,n5,n6,n7,n8,n9)
nodes = list(n1,n2,n3,n4,n5,n6)
edges <- metody.init(nodes)
edges <- metody.mutateEdges(edges, 2)
edges
source('mht.r')
# Z wejscia gdzie otrzymuje liste wierzcholkow z wartosciami generuje tylko prawidlowe krawedzie i zapisuje zaleznosci miedzy przecinajacymi sie
# !!!KONSTRUKCJE!!!
#
# wyspa - list(x,y,v) :: wspolrzedne wyspy i jej liczba
#
# przyjmuje dwie wyspy jako argumenty
# zwraca wartosc logiczna - czy moga one byc polaczone mostem
# tzn czy maja taka sama wspolrzedna rzedna lub odcieta
metody.canBeConnected <- function(islandA,islandB)
{
return( (islandA$x == islandB$x) || (islandA$y == islandB$y))
}
metody.genEdgeNo <- function(){
x <- UG()
if(x<=0.33){
return(0)
}
else{
if(x<=0.66){
return(1)
}
else{
return(2)
}
}
}
metody.mutateEdges <- function(r, degree){
if(degree==1){
tmp <- sample(1:length(r), 1)
return(metody.mutate(r, tmp))
}
else{
tmp <- metody.mutate(r, sample(1:length(r), 1))
return(metody.mutate(tmp, sample(1:length(r), 1)))
}
}
metody.mutate <- function(r, x) #mutuje wskazana krawedz (numer x) ze zbioru (r)
{v1<- metody.genEdgeNo()
if(r[[x]]$edgeNo<0){ #gdy wylaczona, wlacz i spr inne
for(i in 1:length(r[[x]]$dep)){
if(r[[r[[x]]$dep[i]]]$edgeNo>=0){
r[[r[[x]]$dep[i]]]$edgeNo <- (-1)*r[[r[[x]]$dep[i]]]$edgeNo
}
}
}
else{ #gdy wlaczona, wylacz
r[[x]]$edgeNo <- (-1) * v1
}
return(r)
}
# n - wektor wysp
metody.findEdges <- function(n)
{
result <- list()
flag <- TRUE
count <- length(n)
for(i in 1:(length(n)-1))
{
for(j in (i+1):length(n))
{
# dla kazdej pary wysp i,j
if( metody.canBeConnected(n[[i]], n[[j]]) ) # jesli mozna postawic most miedzy wyspami i oraz j
{
flag <- TRUE
for(k in 1:count)
{
# czy pomiedzy wyspami jest jeszcze inna wyspa
if
(
n[[i]]$x==n[[j]]$x && n[[j]]$x==n[[k]]$x && (n[[i]]$y<n[[k]]$y && n[[k]]$y<n[[j]]$y || n[[j]]$y<n[[k]]$y && n[[k]]$y<n[[i]]$y)
||
n[[i]]$y==n[[j]]$y && n[[j]]$y==n[[k]]$y && (n[[i]]$x<n[[k]]$x && n[[k]]$x<n[[j]]$x || n[[j]]$x<n[[k]]$x && n[[k]]$x<n[[i]]$x)
)
{
flag <- FALSE
break
}
}
if(flag)
{
if(n[[i]]$x <= n[[j]]$x)
{#potrzebne te warunki, zeby pozniej przeciecia dobrze skminic
if(n[[i]]$x != n[[j]]$x)
{
tmp_x1 <- n[[i]]$x
tmp_x2 <- n[[j]]$x
tmp_y1 <- n[[i]]$y
tmp_y2 <- n[[j]]$y
tmp_v1 <- n[[i]]$v
tmp_v2 <- n[[j]]$v
}
else
{
if(n[[i]]$y <= n[[j]]$y)
{
tmp_x1 <- n[[i]]$x
tmp_x2 <- n[[j]]$x
tmp_y1 <- n[[i]]$y
tmp_y2 <- n[[j]]$y
tmp_v1 <- n[[i]]$v
tmp_v2 <- n[[j]]$v
}
else
{
tmp_x2 <- n[[i]]$x
tmp_x1 <- n[[j]]$x
tmp_y2 <- n[[i]]$y
tmp_y1 <- n[[j]]$y
tmp_v1 <- n[[j]]$v
tmp_v2 <- n[[i]]$v
}
}
}
else
{
tmp_x2 <- n[[i]]$x
tmp_x1 <- n[[j]]$x
tmp_y2 <- n[[i]]$y
tmp_y1 <- n[[j]]$y
tmp_v1 <- n[[j]]$v
tmp_v2 <- n[[i]]$v
}
result[[length(result)+1]] <- list(x1=tmp_x1, y1=tmp_y1, v1=(n[[i]]$v), x2=tmp_x2, y2=tmp_y2, v2=(n[[j]]$v), dep=c(), edgeNo=0)
}
}
}
}
return(result)
}
metody.areCrossing  <- function(n){
for(i in 1:(length(n)-1)){
for(j in (i+1):length(n)){
if(
n[[i]]$x1<n[[j]]$x1 && n[[i]]$x2>n[[j]]$x1 && n[[i]]$y1>n[[j]]$y1 && n[[i]]$y1<n[[j]]$y2
||
n[[j]]$x1<n[[i]]$x1 && n[[j]]$x2>n[[i]]$x1 && n[[j]]$y1>n[[i]]$y1 && n[[j]]$y1<n[[i]]$y2
){
n[[i]]$dep[length(n[[j]]$dep)+1] <- c(j)
n[[j]]$dep[length(n[[j]]$dep)+1] <- c(i)
}
}
}
return(n)
}
metody.init <- function(n){ #z listy wierzcholkow generuje graf
result <- metody.findEdges(n)
result <- metody.areCrossing(result)
return(result)
}
#node = list(x,y,val)
n1 = list(x=1,y=2,v=2)
n2 = list(x=1,y=3,v=2)
n3 = list(x=2,y=3,v=4)
n4 = list(x=2,y=1,v=3)
n5 = list(x=3,y=1,v=3)
n6 = list(x=3,y=2,v=1)
#n7 = list(x=10,y=10,v=1) #do spr, ale dziala
#n8 = list(x=10,y=20,v=1)
#n9 = list(x=10,y=30,v=1)
#nodes = list(n1,n2,n3,n4,n5,n6,n7,n8,n9)
nodes = list(n1,n2,n3,n4,n5,n6)
edges <- metody.init(nodes)
edges <- metody.mutateEdges(edges, 2)
edges
